diff --git ortools/linear_solver/BUILD.bazel ortools/linear_solver/BUILD.bazel
index b6f00dc01a..5d4950b9ce 100644
--- ortools/linear_solver/BUILD.bazel
+++ ortools/linear_solver/BUILD.bazel
@@ -63,7 +63,7 @@ py_proto_library(
 )
 
 # You can include the interfaces to different solvers by invoking '--define'
-# flags. By default GLOP, BOP, SCIP, GUROBI, and CP-SAT interface are included.
+# flags. By default GLOP, BOP, GUROBI, and CP-SAT interface are included.
 #
 # For instance, if you want to use the GLPK solver, build with
 # '--define USE_GLPK=' (or add it to your bazel.rc file). This will download,
@@ -79,11 +79,7 @@ cc_library(
         "linear_expr.cc",
         "linear_solver_callback.cc",
         "linear_solver.cc",
-        "lpi_glop.cpp",
-        "pdlp_interface.cc",
         "sat_interface.cc",
-        "scip_callback.cc",
-        "scip_interface.cc",
     ] + select({
         ":with_cbc": ["cbc_interface.cc"],
         "//conditions:default": [],
@@ -103,17 +99,12 @@ cc_library(
         "linear_expr.h",
         "linear_solver.h",
         "linear_solver_callback.h",
-        "scip_callback.h",
-        "scip_helper_macros.h",
     ],
     copts = [
-        "-DUSE_PDLP",
-        "-DUSE_SCIP",
         "-DUSE_HIGHS",
     ],
     deps = [
         ":linear_solver_cc_proto",
-        ":scip_with_glop",
         ":model_exporter",
         ":model_validator",
         "@com_google_absl//absl/status",
@@ -133,12 +124,8 @@ cc_library(
         "//ortools/bop:integral_solver",
         "//ortools/glop:lp_solver",
         "//ortools/glop:parameters_cc_proto",
-        "//ortools/gscip:legacy_scip_params",
         "//ortools/gurobi:environment",
         "//ortools/linear_solver/proto_solver:proto_solver",
-        "//ortools/pdlp:primal_dual_hybrid_gradient",
-        "//ortools/pdlp:solve_log_cc_proto",
-        "//ortools/pdlp:solvers_cc_proto",
         "//ortools/port:file",
         "//ortools/port:proto_utils",
         "//ortools/sat:cp_model_cc_proto",
@@ -173,31 +160,6 @@ cc_library(
     ],
 )
 
-copy_file(
-    name = "lpi_glop",
-    src = "@scip//:src/lpi/lpi_glop.cpp",
-    out = "lpi_glop.cpp",
-)
-
-cc_library(
-    name = "scip_with_glop",
-    srcs = ["lpi_glop.cpp"],
-    deps = [
-        "//ortools/glop:lp_solver",
-        "@scip//:libscip",
-    ],
-)
-
-cc_library(
-    name = "scip_helper_macros",
-    hdrs = ["scip_helper_macros.h"],
-    deps = [
-        "//ortools/base:status_macros",
-        "@com_google_absl//absl/status",
-        "@com_google_absl//absl/strings:str_format",
-    ],
-)
-
 # Model exporter that can write MPS and LP file formats from an MPModelProto.
 cc_library(
     name = "model_exporter",
diff --git ortools/linear_solver/linear_solver.cc ortools/linear_solver/linear_solver.cc
index ef4f68560b..4e796d8f08 100644
--- ortools/linear_solver/linear_solver.cc
+++ ortools/linear_solver/linear_solver.cc
@@ -378,7 +378,9 @@ extern MPSolverInterface* BuildHighsInterface(bool mip, MPSolver* const solver);
 #endif
 extern MPSolverInterface* BuildBopInterface(MPSolver* const solver);
 extern MPSolverInterface* BuildGLOPInterface(MPSolver* const solver);
+#if defined(USE_PDLP)
 extern MPSolverInterface* BuildPdlpInterface(MPSolver* const solver);
+#endif
 extern MPSolverInterface* BuildSatInterface(MPSolver* const solver);
 #if defined(USE_SCIP)
 extern MPSolverInterface* BuildSCIPInterface(MPSolver* const solver);
@@ -401,8 +403,10 @@ MPSolverInterface* BuildSolverInterface(MPSolver* const solver) {
       return BuildBopInterface(solver);
     case MPSolver::GLOP_LINEAR_PROGRAMMING:
       return BuildGLOPInterface(solver);
+#if defined(USE_PDLP)
     case MPSolver::PDLP_LINEAR_PROGRAMMING:
       return BuildPdlpInterface(solver);
+#endif
     case MPSolver::SAT_INTEGER_PROGRAMMING:
       return BuildSatInterface(solver);
 #if defined(USE_CLP) || defined(USE_CBC)
diff --git ortools/linear_solver/proto_solver/BUILD.bazel ortools/linear_solver/proto_solver/BUILD.bazel
index 2eba856333..b9e9f7d88f 100644
--- ortools/linear_solver/proto_solver/BUILD.bazel
+++ ortools/linear_solver/proto_solver/BUILD.bazel
@@ -14,28 +14,22 @@
 package(default_visibility = ["//visibility:public"])
 
 # This works on a fixed set of solvers.
-# By default SCIP, GUROBI, PDLP, and CP-SAT interface are included.
+# By default GUROBI and CP-SAT interface are included.
 cc_library(
     name = "proto_solver",
     srcs = [
         "gurobi_proto_solver.cc",
         "highs_proto_solver.cc",
-        "pdlp_proto_solver.cc",
         "sat_proto_solver.cc",
         "sat_solver_utils.cc",
-        "scip_proto_solver.cc",
     ],
     hdrs = [
         "gurobi_proto_solver.h",
         "highs_proto_solver.h",
-        "pdlp_proto_solver.h",
         "sat_proto_solver.h",
         "sat_solver_utils.h",
-        "scip_proto_solver.h",
     ],
     copts = [
-        "-DUSE_PDLP",
-        "-DUSE_SCIP",
         "-DUSE_HIGHS",
     ],
     deps = [
@@ -51,15 +45,10 @@ cc_library(
         "//ortools/bop:integral_solver",
         "//ortools/glop:lp_solver",
         "//ortools/glop:parameters_cc_proto",
-        "//ortools/gscip:legacy_scip_params",
         "//ortools/gurobi:environment",
         "//ortools/linear_solver:linear_solver_cc_proto",
         "//ortools/linear_solver:model_exporter",
         "//ortools/linear_solver:model_validator",
-        "//ortools/linear_solver:scip_with_glop",
-        "//ortools/pdlp:primal_dual_hybrid_gradient",
-        "//ortools/pdlp:solve_log_cc_proto",
-        "//ortools/pdlp:solvers_cc_proto",
         "//ortools/port:file",
         "//ortools/port:proto_utils",
         "//ortools/sat:cp_model_cc_proto",
