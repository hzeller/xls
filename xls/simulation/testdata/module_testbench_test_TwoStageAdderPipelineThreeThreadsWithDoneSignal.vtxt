module test_module(
  input wire clk,
  input wire reset,
  input wire [15:0] operand_0,
  input wire [15:0] operand_1,
  output wire [15:0] out
);
  wire [15:0] result;
  reg [15:0] p0;
  reg [15:0] p1;
  always @ (posedge clk) begin
    if (reset) begin end else begin
      p0 <= result;
      p1 <= p0;
    end
  end
  assign result = operand_0 + operand_1;
  assign out = p1;
endmodule


module testbench;
  reg clk;
  reg [15:0] operand_0;
  reg [15:0] operand_1;
  reg reset;
  wire [15:0] out;
  test_module dut (
    .clk(clk),
    .operand_0(operand_0),
    .operand_1(operand_1),
    .reset(reset),
    .out(out)
  );
  reg is_thread_0_done;
  reg is_thread_1_done;
  reg is_thread_2_done;

  // Clock generator.
  initial begin
    clk = 0;
    forever #5 clk = !clk;
  end

  // Reset generator.
  initial begin
    reset = 1'h1;
    repeat (5) @(posedge clk);
    #1;
    reset = 1'h0;
  end

  // Watchdog timer.
  initial begin
    repeat (10000) @(posedge clk);
    #1;
    $display("ERROR: timeout, simulation ran too long (10000 cycles).");
    $finish;
  end

  // Monitor for input/output ports.
  initial begin
    $display("Starting. Clock rises at 5, 15, 25, ...:");
    $monitor("%t operand_0: %d operand_1: %d reset: %d out: %d", $time, operand_0, operand_1, reset, out);
  end

  // Thread 0. Drives inputs: operand_0
  initial begin
    is_thread_0_done = 1'h0;

    operand_0 = 16'dx;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;

    // Wait for last cycle of reset
    #8;
    while (!(1'h1 && reset == 1'h0)) begin
      #10;
    end
    @(posedge clk);
    #1;

    operand_0 = 16'h0021;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;

    operand_0 = 16'h0032;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;

    operand_0 = 16'h0080;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;

    operand_0 = 16'dx;

    is_thread_0_done = 1'h1;
  end

  // Thread 1. Drives inputs: operand_1
  initial begin
    is_thread_1_done = 1'h0;

    operand_1 = 16'dx;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;

    // Wait for last cycle of reset
    #8;
    while (!(1'h1 && reset == 1'h0)) begin
      #10;
    end
    @(posedge clk);
    #1;

    operand_1 = 16'h0021;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;

    operand_1 = 16'h0032;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;

    operand_1 = 16'h002a;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;

    operand_1 = 16'dx;

    is_thread_1_done = 1'h1;
  end

  // Thread 2. Drives inputs: <none>
  initial begin
    is_thread_2_done = 1'h0;

    // Wait 1 cycle(s).
    @(posedge clk);
    #1;

    // Wait for last cycle of reset
    #8;
    while (!(1'h1 && reset == 1'h0)) begin
      #10;
    end
    @(posedge clk);
    #1;

    // Wait 1 cycle(s).
    #8;
    $display("%t OUTPUT out = 16'h%0x (#0)", $time, out);
    @(posedge clk);
    #1;

    // Wait 1 cycle(s).
    #8;
    $display("%t OUTPUT out = 16'h%0x (#1)", $time, out);
    @(posedge clk);
    #1;

    // Wait 1 cycle(s).
    #8;
    $display("%t OUTPUT out = 16'h%0x (#2)", $time, out);
    @(posedge clk);
    #1;

    // Wait 1 cycle(s).
    #8;
    $display("%t OUTPUT out = 16'h%0x (#3)", $time, out);
    @(posedge clk);
    #1;

    // Wait 1 cycle(s).
    #8;
    $display("%t OUTPUT out = 16'h%0x (#4)", $time, out);
    @(posedge clk);
    #1;

    is_thread_2_done = 1'h1;
  end

  // Thread completion monitor.
  initial begin
    @(posedge clk);
    #1;

    // Wait for reset deasserted
    #8;
    while (!(1'h1 && reset == 1'h0)) begin
      #10;
    end
    @(posedge clk);
    #1;

    // Wait for all threads to complete
    #8;
    while (!(1'h1 && is_thread_0_done == 1'h1 && is_thread_1_done == 1'h1 && is_thread_2_done == 1'h1)) begin
      #10;
    end
    @(posedge clk);
    #1;
    $finish;
  end
endmodule
